#include <iostream>
#include <vector>

using namespace std;

int main ()
{
    int n,m,j,i,oper,repeat,first,second,x,y;

    vector<int> a; // Вводим первое множество
    vector<int> b; // Вводим второе множество
    vector<int> c; // Итоговое множество
    vector<int> u; // Универсум

    for (i = 1; i<51; i++) { // Заполняем универсум элементами [1;50]
        u.push_back(i);
    }

    cout << "Каким образом вы хотите задать множество А? \n1 - Перечисление \n2 - Высказывание\n";
    cout << "Ваш выбор: ";
    cin >> first;
    switch(first)
    {
        case 1: {
            // Перечислительный способ
            // Пользователь вводит мощность множества А
            cout << "Введите мощность множества А (0 <= |A| <= 20): ";
            cin >> n;

            // Пользователь вводит элементы множества A
            cout << "Введите элементы множества А через пробел (В промежутке [0;50]): ";
            for (i = 0; i<n; i++){
            int current_el;
            cin >> current_el;
            a.push_back(current_el);
            }
            break;
        }
        case 2: {
            // Метод высказывания
            cout << "Введите мощность множества А (0 <= |A| <= 20): ";
            cin >> n;
            for (int k=1; k<=n; k++){ // Цикл для записи элементов в множество А методом высказывания
                x = k*2+5; // функция для множества А
                a.push_back(x);
            }

            // Выводим множество А на экран
            cout << "A = { ";
            for (i = 0; i<a.size(); i++){
                cout << a[i]<< " ";
            }
            cout << "}\n"; 
            break;
        }
    }

    cout << "\nКаким образом вы хотите задать множество B? \n1 - Перечисление \n2 - Высказывание\n";
    cout << "Ваш выбор: ";
    cin >> second;
    switch(second)
    {
        case 1: {
            // Перечислительный способ
            // Пользователь вводит мощность множества А
            cout << "Введите мощность множества B (0 <= |B| <= 20): ";
            cin >> m;

            // Пользователь вводит элементы множества A
            cout << "Введите элементы множества B через пробел (В промежутке [0;50]): ";
            for (i = 0; i<m; i++){
            int current_el;
            cin >> current_el;
            b.push_back(current_el);
            }
            break;
        }
        case 2: {
            // Метод высказывания
            cout << "Введите мощность множества B (0 <= |B| <= 20): ";
            cin >> m;
            for (int r=1; r<=m; r++){ // Цикл для записи элементов в множество B методом высказывания
                y = r*2+1; // функция для множества B
                b.push_back(y);
            }

            // Выводим множество B на экран
            cout << "B = { ";
            for (i = 0; i<b.size(); i++){
                cout << b[i]<< " ";
            }
            cout << "}\n"; 
            break;
        }
    }

    operation:
    c.clear();

    // Пользователь выбирает операцию, которую он хочет выполнить
    cout << "\nВыберите операцию, которую вы хотите выполнить над множествами:\n";
    cout << "1 - Объединение\n"; 
    cout << "2 - Пересечение\n"; 
    cout << "3 - Разность A/B\n"; 
    cout << "4 - Разность B/A\n";
    cout << "5 - Симметрическая разность\n";
    cout << "6 - Операция дополнения над множеством A\n";
    cout << "7 - Операция дополнения над множеством B\n";
    cout << "8 - Декартового произведения\n";
    cout << "Ваш выбор: ";
    cin >> oper;
    switch(oper)
    {
        case 1: { // Операция объеденения 
            // Записываем все элементы  множества А в множество С
            for (int i = 0; i < n; i++) {
                c.push_back(a[i]);
            }
            for (i = 0; i < m; i++) { // Проходимся по элементам множества B
                for (j = 0; j < c.size(); j++) { // Проходимся по элементам множества С
                    if (b[i] != c[j]) { // Если элемент множества В не равен элементу множества С, то записываем его в множество С
                        if (j + 1 == c.size()) { // Проверяем, является ли этот элемент последним
                            c.push_back(b[i]);
                        }
                    }
                    else { // Если элемент является последним, то заканчиваем проверку элементов
                        break;
                    }
                }
            }

            // Выводим итоговое множество
            cout << "\nC = { ";
            for (i = 0; i<c.size(); i++){
                cout << c[i]<< " ";
            }
            cout << "}\n"; 
            break;
        }

        case 2: {
            // Операция пересечения
            for (i = 0; i<n; i++){ // Проходимся по каждому элементу множества А
                for (j = 0; j<m; j++){ // Проходимся по каждому элементу множества B
                    if (a[i] == b[j]){ // Если элемент множества А равен элементу множества B, то мы записываем его в итоговое множество С
                        c.push_back(a[i]);
                    }
                }
            } 
            
            // Выводим итоговое множество
            cout << "\nC = { ";
            for (i = 0; i<c.size(); i++){
                cout << c[i]<< " ";
            }
            cout << "}\n"; 
            break;
        }

        case 3: {
            // Операция разности A/B
            for (i = 0; i<n; i++){ // Проходимся по элементам множества А
                for (j = 0; j<m; j++){ // Проходимся по элементам множества B
                    if (a[i] == b[j]){ // сравниваем элемент множества А с эл-ом множества В
                        break; // если элем. мн-ва А равен эл-ту мн-ва В, завершаем проверку для этого хода цикла
                    } 
                    if (j+1 == m) { // проверяем, явл ли след элем мн-ва В последним
                        c.push_back(a[i]); // если элемент последний, то записываем его в мн-во C
                    }
                } 
            }
            // Выводим итоговое множество
            cout << "\nC = { ";
            for (i = 0; i<c.size(); i++){
                cout << c[i]<< " ";
            }
            cout << "}\n";
            break;
        }

        case 4: {         
            // Операция разности B/A
            for (i = 0; i<m; i++){ // Проходимся по элементам множества B
                for (j = 0; j<n; j++){ // Проходимся по элементам множества А
                    if (b[i] == a[j]){ // сравниваем элемент мн-ва B с эл-том мн-ва А
                        break; // если элементы равны, заканчиваем проверку для этого прохода цикла
                    } 
                    if (j+1 == n) { // проверяем, явл ли след элем мн-ва А последним
                        c.push_back(b[i]);   // если элемент последний, то записываем его в мн-во C 
                    }
                } 
            }

            // Выводим итоговое множество
            cout << "\nC = { ";
            for (i = 0; i<c.size(); i++){
                cout << c[i]<< " ";
            }
            cout << "}\n"; 
            break;
        }

        case 5: {
            // Операция симметрической разности
            for (i = 0; i<n; i++){ // Проходимся по элементам множества А
                for (j = 0; j<m; j++){ // Проходимся по элементам множества B
                    if (a[i] == b[j]){ // сравниваем элемент множества А с эл-ом множества В
                        break; // если элем. мн-ва А равен эл-ту мн-ва В, завершаем проверку для этого хода цикла
                    } 
                    if (j+1 == m) { // проверяем, явл ли след элем мн-ва В последним
                        c.push_back(a[i]);  // если элемент последний, то записываем его в мн-во C  
                    }
                } 
            }

            for (i = 0; i<m; i++){ // Проходимся по элементам множества В
                for (j = 0; j<n; j++){ // Проходимся по элементам множества А
                    if (b[i] == a[j]){ // сравниваем элемент мн-ва B с эл-том мн-ва А
                        break; // если элементы равны, заканчиваем проверку для этого прохода цикла
                    } 
                    if (j+1 == n) { // проверяем, явл ли след элем мн-ва В последним
                        c.push_back(b[i]);  // если элемент последний, то записываем его в мн-во C  
                    }
                } 
            }

            // Выводим итоговое множество
            cout << "\nC = { ";
            for (i = 0; i<c.size(); i++){
                cout << c[i]<< " ";
            }
            cout << "}\n"; 
            break;
        }

        case 6: {
            // Операция дополнения над множеством A
            for (i = 0; i<u.size(); i++){ // Проходимся по элементам универсального множества 
                for (j = 0; j<n; j++){ // Проходимся по элементам множества А
                    if (u[i] == a[j]){ // Если элемент универсального мн-ва равен элементу мн-ва А, то выходим из данной проверки
                        break;
                    } 
                    if (j+1 == n) {
                        c.push_back(u[i]); // Если след. элемент унив. мн-ва явл. последним, то записываем его в мн-во С.
                    }
                } 
            }

            // Выводим итоговое множество
            cout << "\nC = { ";
            for (i = 0; i<c.size(); i++){
                cout << c[i]<< " ";
            }
            cout << "}\n"; 
            break;
        }

        case 7: {
            // Операция дополнения над множеством B
            for (i = 0; i<u.size(); i++){ // Проходимся по элементам унив. множества 
                for (j = 0; j<m; j++){ // Проходимся по элементам множества B
                    if (u[i] == b[j]){ // Если элемент универсального мн-ва равен элементу мн-ва А, то выходим из данной проверки
                        break;
                    } 
                    if (j+1 == m) {
                        c.push_back(u[i]); // Если след. элемент унив. мн-ва явл. последним, то записываем его в мн-во С.
                    }
                } 
            }
            
            // Выводим итоговое множество
            cout << "\nC = { ";
            for (i = 0; i<c.size(); i++){
                cout << c[i]<< " ";
            }
            cout << "}\n"; 
            break;
        }

        case 8: {
            // Операция Декартового произведения
            for (int i = 0; i < n; i++) { // Проходимся по элементам множества А
                for (int j = 0; j < m; j++) { // Проходимся по элементам множества B
                    c.push_back(a[i]); // Записываем элемент множества A в множество C
                    c.push_back(b[j]); // Записываем элемент множества B в множество С
                }
            }

            // Выводим итоговое множество
            cout << "\nC = { ";
            for (int i = 0; i < c.size(); i += 2){
                cout << "<" << c[i] << " " << c[i+1] << "> ";
            }
            cout << "}" << endl;
            break;
        }
        default: cout << "Выберите операцию."; return 0;
    }

    // Спрашивем у пользователя, хочет ли он выполнить еще операции, либо же он хочет завершить программу
    cout << "\nВы хотите выполнить еще одну операцию(1) или завершить программу(2)?: ";
    cin >> repeat;
    switch(repeat)
    {
        // В случае, если пользователь хочет выполнить еще операции, то переходим к выбору операций
        case 1: goto operation; // line 97
        // Если пользователь решил завершить программу, то программа завершается
        case 2: return 0;
        default: cout << "Выберите действие.";
    }
}