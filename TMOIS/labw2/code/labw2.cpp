#include <iostream>
#include <vector>

using namespace std;

int main ()
{
    int n,m,j,i,oper,repeat,div;

    vector<int> a; // Вводим первое множество
    vector<int> b; // Вводим второе множество
    vector<int> c; // Итоговое множество

    // Пользователь вводит мощность множества А
    cout << "Введите мощность множества А (0 <= |A| <= 20): ";
    cin >> n;

    // Пользователь вводит элементы множества A
    cout << "Введите элементы множества А через пробел (В промежутке [0;50]): ";
    for (i = 0; i<n; i++){
        int current_el;
        cin >> current_el;
        a.push_back(current_el);
    }

    // Пользователь вводит мощность множества B
    cout << "Введите мощность множества B (0 <= |B| <= 20): ";
    cin >> m;

    // Пользователь вводит элементы множества B
    cout << "Введите элементы множества B через пробел (В промежутке [0;50]): ";
    for (i = 0; i<m; i++){
        int current_el;
        cin >> current_el;
        b.push_back(current_el);
    }

    cout << endl;
operation:
    c.clear();
    // Пользователь выбирает операцию, которую он хочет выполнить
    cout << "Выберите операцию, которую вы хотите выполнить над множествами:\n";
    cout << "1 - Объединение\n"; 
    cout << "2 - Пересечение\n"; 
    cout << "3 - Разность A/B\n"; 
    cout << "4 - Разность B/A\n";
    cout << "5 - Симметрическая разность\n";
    cout << "6 - Операция дополнения над множеством A\n";
    cout << "7 - Операция дополнения над множеством B\n";
    cout << "8 - Декартового произведения\n";
    cout << "Ваш выбор: ";
    cin >> oper;
    switch(oper)
    {
        case 1: { // Операция объеденения 
            // Записываем все элементы  множества А в множество С
            for (int i = 0; i < n; i++) {
                c.push_back(a[i]);
            }
            for (i = 0; i < m; i++) { // Проходимся по элементам множества B
                for (j = 0; j < c.size(); j++) { // Проходимся по элементам множества С
                    if (b[i] != c[j]) { // Если элемент множества В не равен элементу множества С, то записываем его в множество С
                        if (j + 1 == c.size()) { // Проверяем, является ли этот элемент последним
                            c.push_back(b[i]);
                        }
                    }
                    else { // Если элемент является последним, то заканчиваем проверку элементов
                        break;
                    }
                }
            }

            // Выводим итоговое множество
            cout << "\nC = { ";
            for (i = 0; i<c.size(); i++){
                cout << c[i]<< " ";
            }
            cout << "}\n"; 
            break;
        }

        case 2: {
            // Операция пересечения
            for (i = 0; i<n; i++){ // Проходимся по каждому элементу множества А
                for (j = 0; j<m; j++){ // Проходимся по каждому элементу множества B
                    if (a[i] == b[j]){ // Если элемент множества А равен элементу множества B, то мы записываем его в итоговое множество С
                        c.push_back(a[i]);
                    }
                }
            } 
            
            // Выводим итоговое множество
            cout << "\nC = { ";
            for (i = 0; i<c.size(); i++){
                cout << c[i]<< " ";
            }
            cout << "}\n"; 
            break;
        }

        case 3: {
            // Операция разности A/B
            for (i = 0; i<n; i++){
                for (j = 0; j<m; j++){
                    if (a[i] == b[j]){
                        break;
                    } 
                    if (j+1 == m) {
                        c.push_back(a[i]);    
                    }
                } 
            }
            // Выводим итоговое множество
            cout << "\nC = { ";
            for (i = 0; i<c.size(); i++){
                cout << c[i]<< " ";
            }
            cout << "}\n";
            break;
        }

        case 4: {         
            // Операция разности B/A
            for (i = 0; i<m; i++){
                for (j = 0; j<n; j++){
                    if (b[i] == a[j]){
                        break;
                    } 
                    if (j+1 == n) {
                        c.push_back(b[i]);    
                    }
                } 
            }

            // Выводим итоговое множество
            cout << "\nC = { ";
            for (i = 0; i<c.size(); i++){
                cout << c[i]<< " ";
            }
            cout << "}\n"; 
            break;
        }

        case 5: {
            // Операция симметрической разности
            for (i = 0; i<n; i++){
                for (j = 0; j<m; j++){
                    if (a[i] == b[j]){
                        break;
                    } 
                    if (j+1 == m) {
                        c.push_back(a[i]);    
                    }
                } 
            }

            for (i = 0; i<m; i++){
                for (j = 0; j<n; j++){
                    if (b[i] == a[j]){
                        break;
                    } 
                    if (j+1 == n) {
                        c.push_back(b[i]);    
                    }
                } 
            }

            // Выводим итоговое множество
            cout << "\nC = { ";
            for (i = 0; i<c.size(); i++){
                cout << c[i]<< " ";
            }
            cout << "}\n"; 
            break;
        }

        case 6: {
            // Операция дополнения над множеством A

        }

        case 7: {
            // Операция дополнения над множеством B
        }

        case 8: {
            // Операция Декартового произведения
            for (int i = 0; i < a.size(); i++) {
                for (int j = 0; j < b.size(); j++) {
                    c.push_back(a[i]);
                    c.push_back(b[j]);
                }
            }

            // Выводим итоговое множество
            cout << "\nC = { ";
            for (int i = 0; i < c.size(); i += 2){
                cout << "<" << c[i] << " " << c[i+1] << "> ";
            }
            cout << "}" << endl;
            break;
        }
        default: cout << "Выберите операцию"; return 0;
    }

    // Спрашивем у пользователя, хочет ли он выполнить еще операции, либо же он хочет завершить программу
    cout << "\nВы хотите выполнить еще одну операцию(1) или завершить программу(2)?: ";
    cin >> repeat;
    switch(repeat)
    {
        // В случае, если пользователь хочет выполнить еще операции, то переходим к выбору операций
        case 1: goto operation; // line 38
        // Если пользователь решил завершить программу, то программа завершается
        case 2: return 0;
        default: cout << "Выберите действие.";
    }
}