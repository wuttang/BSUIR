import pickle
import os
import exception
from room import Room
from vacuum_cleaner import VacuumCleaner

if __name__ == '__main__':
    if not os.path.isfile("resources/data.pickle") or os.path.getsize("resources/data.pickle") == 0:
        print("–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—ã–ª–µ—Å–æ—Å. –°–ª–µ–¥—É–µ—Ç —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")
        choose_color = input("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –ø—ã–ª–µ—Å–æ—Å–∞: ")
        choose_firm = input("–í–≤–µ–¥–∏—Ç–µ —Ñ–∏—Ä–º—É –ø—ã–ª–µ—Å–æ—Å–∞: ")
        new_vacuum_cleaner = VacuumCleaner(choose_color, choose_firm)
        choose_min_power = int(input("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å(–í—Ç): "))
        choose_max_power = int(input("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å(–í—Ç): "))
        new_vacuum_cleaner.engine.set_power(choose_min_power, choose_max_power)
        with open("resources/data.pickle", "wb") as file:
            pickle.dump(new_vacuum_cleaner, file)
    else:
        with open("resources/data.pickle", "rb") as file:
            new_vacuum_cleaner = pickle.load(file)
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—ã–ª–µ—Å–æ—Å: \n\t–§–∏—Ä–º–∞: {new_vacuum_cleaner.firm}\n\t–¶–≤–µ—Ç: {new_vacuum_cleaner.color}")

while True:
    choose_action = input("\nüïπ–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—ã–ª–µ—Å–æ—Å–æ–º:\n\t1.–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—ã–ª–µ—Å–æ—Å\n\t2.–í—ã–±—Ä–∞—Ç—å –Ω–∞—Å–∞–¥–∫—É"
                          "\n\t3.–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—Å–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞"
                          "\n\t4.–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—Å–æ—Ä–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—ã–ª–∏\n\t5.–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∞—è –Ω–∞—Å–∞–¥–∫–∞ –Ω–∞–¥–µ—Ç–∞"
                          "\n\t6.–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–æ—â–Ω–æ—Å—Ç—å\n\t7.–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å\n\nüßπ–£–±–æ—Ä–∫–∞:"
                          "\n\t8.–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–±–æ—Ä–∫—É –ø–æ–º–µ—â–µ–Ω–∏—è\n\n‚öôÔ∏è–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ø—ã–ª–µ—Å–æ—Å–∞:\n\t9.–ó–∞–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"
                          "\n\t10.–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—ã–ª–∏\n\t11.–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞—Å–∞–¥–∫—É"
                          "\n\t12.–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n\n‚ùå 13.–í—ã—Ö–æ–¥\n\n–í–∞—à –≤—ã–±–æ—Ä: ")
    if choose_action == "1":
        with open("resources/data.pickle", "rb") as file:
            new_vacuum_cleaner = pickle.load(file)
        if new_vacuum_cleaner.control_buttons.start_b:
            print("–ü—ã–ª–µ—Å–æ—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
            continue
        set_power = int(input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é –º–æ—â–Ω–æ—Å—Ç—å(–í—Ç): "))
        if set_power < new_vacuum_cleaner.engine.min_power or set_power > new_vacuum_cleaner.engine.max_power:
                raise exception.InvalidPowerValue("‚ÄºÔ∏è –í–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        new_vacuum_cleaner.start_vacuum(set_power)
        with open("resources/data.pickle", "wb") as file:
            pickle.dump(new_vacuum_cleaner, file)
    elif choose_action == "2":
        with open("resources/data.pickle", "rb") as file:
            new_vacuum_cleaner = pickle.load(file)
        choose_nozzle = input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–∞–¥–∫—É(Turbo Brush, Slot Nozzle, Round Nozzle, Laminate Nozzle, "
                              "Corner Nozzle).\n–í–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º: ")
        new_vacuum_cleaner.put_on_nozzle(choose_nozzle)
        with open("resources/data.pickle", "wb") as file:
            pickle.dump(new_vacuum_cleaner, file)
    elif choose_action == "3":
        new_vacuum_cleaner.check_filter_health()
    elif choose_action == "4":
        new_vacuum_cleaner.check_dust_container()
    elif choose_action == "5":
        new_vacuum_cleaner.show_nozzle()
    elif choose_action == "6":
        with open("resources/data.pickle", "rb") as file:
            new_vacuum_cleaner = pickle.load(file)
        wishful_power = int(input("–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: "))
        if wishful_power < new_vacuum_cleaner.engine.min_power or wishful_power > new_vacuum_cleaner.engine.max_power:
            raise exception.InvalidPowerValue("‚ÄºÔ∏è –í–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        new_vacuum_cleaner.control_buttons.change_power(wishful_power)
        with open("resources/data.pickle", "wb") as file:
            pickle.dump(new_vacuum_cleaner, file)
    elif choose_action == "7":
        new_vacuum_cleaner.show_power()
    elif choose_action == "8":
        with open("resources/data.pickle", "rb") as file:
            new_vacuum_cleaner = pickle.load(file)
        choose_length = int(input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–º–Ω–∞—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å\n–î–ª–∏–Ω–∞: "))
        choose_width = int(input("–®–∏—Ä–∏–Ω–∞: "))
        if not new_vacuum_cleaner.control_buttons.start_b:
            raise exception.InvalidButtonException("‚ÄºÔ∏è–ü—ã–ª–µ—Å–æ—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ")
        elif new_vacuum_cleaner.dust_container.isFilled:
            raise exception.InvalidButtonException("‚ÄºÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω. –û—á–∏—Å—Ç–∏—Ç–µ –µ–≥–æ")
        elif new_vacuum_cleaner.filter.health <= 0:
            raise exception.InvalidFilterHealthValue("‚ÄºÔ∏è –§–∏–ª—å—Ç—Ä –∑–∞—Å–æ—Ä–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏—Ç–µ –µ–≥–æ.")
        elif not (new_vacuum_cleaner.nozzle.slot_nozzle or new_vacuum_cleaner.nozzle.turbo_brush or
                  new_vacuum_cleaner.nozzle.round_nozzle or new_vacuum_cleaner.nozzle.corner_nozzle or
                  new_vacuum_cleaner.nozzle.laminate_nozzle):
            raise exception.InvalidNozzleValue("‚ÄºÔ∏è –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å–∞–¥–∫–∞. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–µ–Ω—å—Ç–µ –µ—ë.")
        else:
            dust_room = Room(choose_length, choose_width)
            new_vacuum_cleaner.clean_room(dust_room)
        with open("resources/data.pickle", "wb") as file:
            pickle.dump(new_vacuum_cleaner, file)
    elif choose_action == "9":
        with open("resources/data.pickle", "rb") as file:
            new_vacuum_cleaner = pickle.load(file)
        new_vacuum_cleaner.change_filter()
        with open("resources/data.pickle", "wb") as file:
            pickle.dump(new_vacuum_cleaner, file)
    elif choose_action == "10":
        with open("resources/data.pickle", "rb") as file:
            new_vacuum_cleaner = pickle.load(file)
        new_vacuum_cleaner.clean_dust_container()
        with open("resources/data.pickle", "wb") as file:
            pickle.dump(new_vacuum_cleaner, file)
    elif choose_action == "11":
        with open("resources/data.pickle", "rb") as file:
            new_vacuum_cleaner = pickle.load(file)
        choose_nozzle = input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å–∞–¥–∫—É(Turbo Brush, Slot Nozzle, Round Nozzle, Laminate Nozzle, "
                              "Corner Nozzle).\n–í–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º: ")
        new_vacuum_cleaner.change_nozzle(choose_nozzle)
        with open("resources/data.pickle", "wb") as file:
            pickle.dump(new_vacuum_cleaner, file)
    elif choose_action == "12":
        with open("resources/data.pickle", "rb") as file:
            new_vacuum_cleaner = pickle.load(file)
        new_vacuum_cleaner.technical_work()
        with open("resources/data.pickle", "wb") as file:
            pickle.dump(new_vacuum_cleaner, file)
    elif choose_action == "13":
        break
    else:
        print("‚ÄºÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ ‚ÄºÔ∏è")
